// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Ability {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String             @unique
  domain           Domain
  action           Action
  abilitiesOnRoles AbilitiesOnRoles[]
  roles            Role[]
}

model Role {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  organizationCode String
  name             String
  abilitiesOnRoles AbilitiesOnRoles[]
  abilities        Ability[]
  users            User[]

  @@unique([organizationCode, name])
}

model AbilitiesOnRoles {
  roleId     String
  abilityId  String
  assignedAt DateTime @default(now())
  ability    Ability  @relation(fields: [abilityId], references: [id])
  role       Role     @relation(fields: [roleId], references: [id])

  @@id([roleId, abilityId])
}

model Organization {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  organizationCode String   @unique
  name             String
  users            User[]
}

model User {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String?
  email            String
  hashedPassword   String?
  organizationCode String
  organization     Organization @relation(fields: [organizationCode], references: [organizationCode])
  roleId           String
  role             Role         @relation(fields: [roleId], references: [id])
  tokens           Token[]
  sessions         Session[]

  @@unique([organizationCode, email])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

enum Action {
  query
  mutate
}

enum Domain {
  settings
}
